# doing stuff without changing the config from the cli
# install socat with your package manager
# view the status page to see these commands take effect
# socat /run/haproxy/admin.sock - <<< "help"
# socat /run/haproxy/admin.sock - <<< "disable server backend-default/varnish01"
# socat /run/haproxy/admin.sock - <<< "enable server backend-default/varnish01"

global
    stats socket /run/haproxy-admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy

    # send syslog messages to the host 'rsyslog'
    ### log rsyslog syslog

    # https://mozilla.github.io/server-side-tls/ssl-config-generator/
    # https://cipherli.st
    # https://www.ssllabs.com/ssltest/
    # tls settings
    tune.ssl.default-dh-param 2048
    ssl-default-bind-ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
    ssl-default-bind-options no-sslv3 no-tls-tickets
    ssl-default-server-ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
    ssl-default-server-options no-sslv3 no-tls-tickets

defaults
    default_backend backend-default
    log     global
    mode    http
    option  forwardfor
    option  httplog
    option  dontlognull
    timeout connect 5000
    timeout client  50000
    timeout server  50000

frontend frontend-default
    bind *:80
    bind *:443 ssl crt /etc/certs.d

    # Bind with the proxy protocol so we can sit behind AWS ELBs and let haproxy do the ssl termination, keep 80/443 bound so
    # servers with no elb still work fine.
    # Be sure ELBs are TCP mode having 80->81 and 443->444
    # https://github.com/jvehent/haproxy-aws
    bind *:81 accept-proxy
    bind *:444 accept-proxy ssl crt /etc/certs.d

    # for free ssls, https://certbot.eff.org
    acl path_certbot path_beg /.well-known/acme-challenge
    use_backend backend-certbot if path_certbot

backend backend-default

    # ideally we would force all traffic to https, but not all clients are ready for this, will have to be done at drupal for now
    # redirect scheme https code 301 if !{ ssl_fc }

    # ideally if all clients were https ready, we would set this cookie so all comms are only done with HSTS on
    # HSTS (15768000 seconds = 6 months)
    # http-response set-header Strict-Transport-Security max-age=15768000

    option http-server-close
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    server nginx nginx:80 check port 80

backend backend-certbot
    option http-server-close
    server cerbot certbot:80 maxconn 50

### listen stats
###     # must come here with https
###     bind *:1936 ssl crt /etc/certs.d
###     stats enable
###     stats uri /
###     stats hide-version
###     stats auth UsEr:PaSsWoRd_CHANGE_ME
