#!/bin/bash

# http://www.davidpashley.com/articles/writing-robust-shell-scripts/
set -eu

FULCRUM_BINDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")"&&pwd)"
source ${FULCRUM_BINDIR}/lib/fulcrum

source ${FULCRUM_BINDIR}/doctor2

# defaults
DOPULL=0
VERBOSE=0
QUIET=0
SUDO=""
MYCOMMAND=""

sudoDockerNeeded

# read in command line args
while getopts ":hnpqvsx" opt; do
  case ${opt} in
    h)
      usage
      shift 1
      ;;
    n)
      DOPULL=0
      shift 1
      ;;
    p)
      DOPULL=1
      shift 1
      ;;
    q)
      QUIET=1
      shift 1
      ;;
    s)
      SUDO="sudo -E "
      shift 1
      ;;
    v)
      VERBOSE=1
      shift 1
      ;;
    x)
      set -x
      shift 1
      ;;
    \?)
      echo "Invalid Option: -$OPTARG" >&2
      echo "Try -h for Help."
      exit 1
      ;;
    :)
      echo "Option -$OPTARG Requires an Argument." >&2
      echo "Try -h for Help."
      exit 1
      ;;
  esac
done

# so docker for mac needs to be running
# docker ps 1> /dev/null 2>/dev/null || eout "docker for mac does not appear to be running, you should launch it from your applications folder. If it is running, you may need to wait a few more seconds for it to finish booting up.  If you do not have docker for mac, please download the stable version from https://docs.docker.com/docker-for-mac/"

# set vars for use in docker compose
export FULCRUM_HOST_USER=$(whoami)

# it does not appear docker-for-mac needs the fulcrum ID work around
export FULCRUM_HOST_UID=$(id -u $FULCRUM_HOST_USER)
export FULCRUM_HOST_GID=$(id -g $FULCRUM_HOST_USER)
if [ $FULCRUM_OS == "MAC" ]; then
  export FULCRUM_HOST_IP=$(ipconfig getifaddr en0 || ipconfig getifaddr en1 || ipconfig getifaddr en2 || ipconfig getifaddr en3 || ipconfig getifaddr en4 || ipconfig getifaddr en5 || ipconfig getifaddr en6 || ipconfig getifaddr en7)
elif [ $FULCRUM_OS == "LIN" ]; then
  FULCRUM_INTERFACE=$(cat /proc/net/dev|grep :|egrep -v '(docker|lo|veth|tun)([0-9a-f]+)?:'|cut -f1 -d:|head -n1)
  export FULCRUM_HOST_IP=$(ip addr list $FULCRUM_INTERFACE |grep "inet " |cut -d' ' -f6|cut -d/ -f1)
fi

DUMMYVAR="DUMMYVAL"
# echo "\${FULCRUM_COMPOSE_YML+DUMMYVAR}: ${FULCRUM_COMPOSE_YML+DUMMYVAR}"

# allow for override in a custom doctor file
if [ -z ${FULCRUM_COMPOSE_YML+DUMMYVAR} ]; then
  # must come after FULCRUM_HOST_USER
  FULCRUM_COMPOSE_YML="$FULCRUM_DIRNAME/var/fulcrum/hinge-config/etc/fulcrum/stack/hinge-${FULCRUM_OS_LC}.yml"
  echo "Using $FULCRUM_COMPOSE_YML for Docker Compose"
fi

# debug
vout "FULCRUM_HOST_USER = $FULCRUM_HOST_USER"
vout "FULCRUM_HOST_UID = $FULCRUM_HOST_UID"
vout "FULCRUM_HOST_GID = $FULCRUM_HOST_GID"
# vout "FULCRUM_INTERFACE = $FULCRUM_INTERFACE"
vout "FULCRUM_HOST_IP = $FULCRUM_HOST_IP"
vout "FULCRUM_COMPOSE_YML = ${FULCRUM_COMPOSE_YML}"
vout "DOPULL = $DOPULL"
vout "VERBOSE = $VERBOSE"
vout "QUIET = $QUIET"
vout "SUDOCK = $SUDOCK"

MYCOMMAND=${1:-}
vout "MYCOMMAND = ${MYCOMMAND}"

case ${MYCOMMAND} in
  "up"|"start"|"restart"|"reload")
    vout "running restart command"
    drestart
    ;;

  "stop"|"halt"|"down"|"shutdown")
    vout "running stop command"
    dStop
    ;;

  "sh"|"bash"|"shell"|"enter"|"dsh"|"dbash")
    vout "running dbash command"
    dbash
    ;;

  "ps"|"dps")
    vout "running dps command"
    dps
    ;;

  "log"|"logs"|"dlog"|"dlogs")
    vout "running dlogs command"
    dlogs
    ;;

  "haproxy"|"haproxyrestart"|"haproxy-restart")
    vout "running haproxyrestart command"
    haproxyrestart
    ;;

  "varnish"|"varnishrestart"|"varnish-restart")
    vout "running varnishrestart command"
    varnishrestart
    ;;

  "conf"|"nginx"|"nginx-restart")
    vout "regenerate nginx .conf file from json & restart nginx"
    nginxConfAll
    ;;

  "ocfl"|"opcacheflush")
    opcacheFlush
    ;;

  "ocof"|"ocoff"|"opcacheoff")
    opcacheOff
    ;;

  "ocon"|"opcacheon")
    opcacheOn
    ;;

  "ocst"|"opcachestatus")
    opcacheStatus
    ;;

  "etch"|"etchost"|"etchosts")
    etcHosts127
    ;;

  "rnd"|"rand"|"random"|"randomstr")
    rndStrInput
    ;;

  "sc"|"signcert")
    signCert "${2:-}"
    ;;

  "fs"|"forcehttps")
    forcehttps "${2:-}"
    ;;

  "ac"|"addcron")
    addCron "${2:-}"
    ;;

  "rc"|"remakecerts")
    remakeCerts
    ;;

  *)
    vout "command not found..."
    sendalert ""
    sendalert "command not found"
    sendalert ""
    sendalert ""
    usage
esac
