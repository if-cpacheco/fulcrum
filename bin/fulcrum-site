#!/bin/bash

# exit script if anything returns an error
set -e

vout()
{
  echo "$1"
}
eout()
{
  vout "$1"
  vout "You might want to run bootstrap again if things are not working"
  exit 1
}

# TODO: make envsubst linked up stream
if [ -d /usr/local/Cellar/gettext/0.19.8.1/bin ]; then
  ENVSUBST=/usr/local/Cellar/gettext/0.19.8.1/bin/envsubst
elif [ -d /usr/local/Cellar/gettext/0.19.7/bin ]; then
  ENVSUBST=/usr/local/Cellar/gettext/0.19.7/bin/envsubst
else
  eout "UNABLE TO FIND bin/envsubst"
fi

CLONING_SITE=false

if [[ "$1" = "--clone" ]]; then
  CLONING_SITE=true
  ORIGINAL_SITE=$2

  FULCRUM_SITE=$3
  FULCRUM_DBNAME=$4
  FULCRUM_REPO=$5
  FULCRUM_AWSPROFILE=$6
  FULCRUM_WRD=$7
else
  ORIGINAL_SITE=$1

  FULCRUM_SITE=$1
  FULCRUM_DBNAME=$2
  FULCRUM_REPO=$3
  FULCRUM_AWSPROFILE=$4
  FULCRUM_WRD=$5
fi

if [ -z $FULCRUM_SITE ];
then
    eout "Error, FULCRUM_SITE not provided!"
else
    vout "FULCRUM_SITE: $FULCRUM_SITE"
fi

if [ -z $FULCRUM_DBNAME ];
then
    eout "Error, FULCRUM_DBNAME not provided!"
else
    vout "FULCRUM_DBNAME: $FULCRUM_DBNAME"
fi

if [ -z $FULCRUM_REPO ];
then
    eout "Error, FULCRUM_REPO not provided!"
else
    vout "FULCRUM_REPO: $FULCRUM_REPO"
fi

if [ ! -z $FULCRUM_AWSPROFILE ];
then
    FULCRUM_AWSPROFILE="--profile $FULCRUM_AWSPROFILE"
fi

if [ ! -z $FULCRUM_WRD ];
then
    FULCRUM_WRD="/$FULCRUM_WRD"
fi

FULCRUM_DBBAK=/Users/$USER/fulcrum/bak/$FULCRUM_SITE.sql.gz
FULCRUM_DBPASS=RS1NVShiDo7iID41v4RApgt2gMpfLHZ
FULCRUM_LOCAL=$(echo $FULCRUM_SITE|sed 's;[^.]*$;ifdev;')
FULCRUM_CONF=/Users/$USER/fulcrum/conf/$FULCRUM_SITE.json
FULCRUM_DOCROOT=/Users/$USER/repos/$FULCRUM_LOCAL$FULCRUM_WRD
FULCRUM_DOCROOT_REL=../../repos/$FULCRUM_LOCAL$FULCRUM_WRD

# pull down the latest DB
# TODO can we md5sum and see if the latest one is already downloaded
if [ ! -f ~/fulcrum/bak/$FULCRUM_SITE.sql.gz ]; then
  vout "Grabbing $ORIGINAL_SITE latest DB (s3://if-backup/dbs/$ORIGINAL_SITE/latest.sql.gz) saving as ~/fulcrum/bak/$FULCRUM_SITE.sql.gz"
  aws $FULCRUM_AWSPROFILE s3 cp s3://if-backup/dbs/$ORIGINAL_SITE/latest.sql.gz $FULCRUM_DBBAK
else
  vout "skipping download of database as you already have ~/fulcrum/bak/$FULCRUM_SITE.sql.gz"
fi

# for whatever reason, mysql doesn't always make this dir
if [ ! -d /usr/local/etc/my.cnf.d ]; then
  mkdir /usr/local/etc/my.cnf.d
fi

# if DB already exists, ask user if they want to blow it away and restore from latest
DO_RESTORE=true
DB_COUNT=`mysql -s -h 127.0.0.1 -u root --password="" --execute="SHOW DATABASES LIKE '$FULCRUM_DBNAME'" | wc -l`
if [ "$DB_COUNT" -gt 0 ]; then
  read -e -p "Drop existing database and restore from fresh backup? (y/n)" DROPDB
  if [ "$DROPDB" == "y" ]; then
    vout "DROPPING $FULCRUM_DBNAME"
    mysql -h 127.0.0.1 -u root --password="" --execute="DROP DATABASE $FULCRUM_DBNAME"
  else
    vout "skipping DB replacement"
    DO_RESTORE=false
  fi
fi

# create the database
vout "Creating $FULCRUM_DBNAME if not exists"
mysql -h 127.0.0.1 -u root --password="" --execute="CREATE DATABASE IF NOT EXISTS $FULCRUM_DBNAME"

if [ $DO_RESTORE == true ]; then
  vout "Restoring $FULCRUM_DBNAME from $FULCRUM_DBBAK"
  gzcat "$FULCRUM_DBBAK" | mysql -h 127.0.0.1 -u root --password="" $FULCRUM_DBNAME
fi

# get the repo
if [ -d ~/repos/$FULCRUM_LOCAL ]; then
  vout "you appear to already have the repo... skipping clone down"
else
  vout "Cloning repo $FULCRUM_REPO to ~/repos/$FULCRUM_LOCAL"
  git clone $FULCRUM_REPO $FULCRUM_DOCROOT

  if [ "$CLONING_SITE" = true ]; then
    vout "Removing original $FULCRUM_REPO .git directory from ~/repos/$FULCRUM_LOCAL"
    rm -rf ~/repos/$FULCRUM_LOCAL/.git
  fi
fi

# see if we need to add the docroot
if [ -d $FULCRUM_DOCROOT/docroot ]; then
  FULCRUM_DOCROOT=$FULCRUM_DOCROOT/docroot
  FULCRUM_DOCROOT_REL=$FULCRUM_DOCROOT_REL/docroot
fi

DRUSH_CMD="/usr/local/bin/drush --root=$FULCRUM_DOCROOT --uri=http://${FULCRUM_LOCAL}"
DRUPAL_VERSION="$($DRUSH_CMD core-status drupal-version --pipe --format=list|cut -f1 -d.)"

if [[ "$DRUPAL_VERSION" != "7" && "$DRUPAL_VERSION" != "8" ]]; then
    eout "Not compatible with Drupal version '$DRUPAL_VERSION'!"
fi

# remove webroot link if it exists
if [ -L ~/fulcrum/webroots/$FULCRUM_LOCAL ]; then
  vout "Removing previous symlink ~/fulcrum/webroots/$FULCRUM_LOCAL"
  rm -f ~/fulcrum/webroots/$FULCRUM_LOCAL
fi

vout "Symlinking ../../repos/$FULCRUM_LOCAL$FULCRUM_WRD -> $FULCRUM_DOCROOT"
ln -s $FULCRUM_DOCROOT_REL ~/fulcrum/webroots/$FULCRUM_LOCAL

# make local files dir
if [ ! -d ~/fulcrum/files/$FULCRUM_LOCAL ]; then
  vout "Making file directory ~/fulcrum/files/$FULCRUM_LOCAL and symlink from /repos/$FULCRUM_LOCAL/sites/default/files"
  mkdir -p ~/fulcrum/files/$FULCRUM_LOCAL
  chmod -R 777 ~/fulcrum/files/$FULCRUM_LOCAL # don't like that this is 777, but you have trouble with uploads otherwise
fi

# remove files link if it exists
if [ -L ~/repos/$FULCRUM_LOCAL$FULCRUM_WRD/sites/default/files ]; then
  vout "Removing previous symlink ~/repos/$FULCRUM_LOCAL$FULCRUM_WRD/sites/default/files"
  rm -f ~/repos/$FULCRUM_LOCAL$FULCRUM_WRD/sites/default/files
fi

# link to the files
vout "Symlinking ~/repos/$FULCRUM_LOCAL/sites/default/files -> /drupal_files/$FULCRUM_LOCAL"
ln -s /drupal_files/$FULCRUM_LOCAL $FULCRUM_DOCROOT/sites/default/files



# TODO: make symlink for wildcards
# ask if a wildcard should be created
#read -p "Respond to any subdomain of *.$MAINSITE (y/n)? " SUBDOMAINS

#if [ "y" == "$SUBDOMAINS" ];
#then
#	echo "Creating symlink for all subdomains *.$MAINSITE.json"
	# cd ~/fulcrum/conf && ln -s $FULCRUM_SITE.json \*.$MAINSITE.json && cd -
#fi

# test to see if the conf exists yet or not
# brew install gettext -- now in bootstrap-fulcrum run
if [ ! -f $FULCRUM_CONF ]; then
  export FULCRUM_DBPASS
  export FULCRUM_DBNAME
  export FULCRUM_ENVIRONMENT=dev
  export FULCRUM_DBUSER=fulcrum
  export FULCRUM_WEBROOT=$FULCRUM_LOCAL
  export FULCRUM_COOKIE=.$(echo $FULCRUM_LOCAL|sed 's;^www\.;;g')
  FUCRUM_CNF_TPL=~/fulcrum/conf/json.tpl

  if [[ "$DRUPAL_VERSION" = "7" ]]; then
    REDIS=""
    VARNISH=""

    if [ -d ~/repos/$FULCRUM_LOCAL$FULCRUM_WRD/sites/all/modules/contrib/redis ]; then
      REDIS="-redis"
    fi

    if [ -d ~/repos/$FULCRUM_LOCAL$FULCRUM_WRD/sites/all/modules/contrib/varnish ]; then
      VARNISH="-varnish"
    fi

    FUCRUM_CNF_TPL=~/fulcrum/conf/json${REDIS}${VARNISH}.tpl
  else
    export FULCRUM_SALT=$(cat /dev/urandom | LC_CTYPE=C tr -dc '_a-zA-Z0-9-' | fold -w 74 | head -n 1)
    export FULCRUM_D8CONFIG="../config/sync"

    FUCRUM_CNF_TPL=~/fulcrum/conf/json8.tpl
  fi

  $ENVSUBST<$FUCRUM_CNF_TPL>~/fulcrum/conf/$FULCRUM_LOCAL.json

  ~/fulcrum/bin/fulcrum-node

  docker exec nginx kill -HUP 1
fi

# ensure fulcrum user is in mysql
vout "ensuring fulcrum user exists in mysql"
USER_COUNT=`mysql -s -h 127.0.0.1 -u root --password="" --execute="select * from mysql.User where user = '$FULCRUM_DBUSER' and Host = '172.17.%';" | wc -l`
if [ "$USER_COUNT" -eq 0 ]; then
  mysql -u root -h 127.0.0.1 -e "GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON *.* TO 'fulcrum'@'172.17.%' IDENTIFIED BY 'RS1NVShiDo7iID41v4RApgt2gMpfLHZ'; FLUSH PRIVILEGES"
fi

cd ~/repos/$FULCRUM_LOCAL

# set public directory
vout "running drush to set public directory"
if [[ "$DRUPAL_VERSION" = "7" ]]; then
  $DRUSH_CMD vset file_public_path sites/default/files
else
  # $DRUSH_CMD config-set system.file path.public sites/default/files
fi

# set temporary directory
vout "running drush to set temporary"
if [[ "$DRUPAL_VERSION" = "7" ]]; then
  $DRUSH_CMD vset file_temporary_path /tmp
else
  # $DRUSH_CMD config-set system.file path.temporary /tmp
fi

# set private directory
# vout "running drush to set public directory"
# if [[ "$DRUPAL_VERSION" = "7" ]]; then
#   $DRUSH_CMD vset file_private_path /private
# else
#   $DRUSH_CMD config-set system.file path.private /private
# fi

# clear all caches
vout "running drush to clear caches"
if [[ "$DRUPAL_VERSION" = "7" ]]; then
  $DRUSH_CMD cc all
else
  $DRUSH_CMD cr
fi

# open site, logged in as admin
vout "launching site in browser..."
$DRUSH_CMD uli
