#!/bin/bash

FULCRUM_DIRNAME=$(dirname $FULCRUM_BINDIR)

UNAMEA=$(uname -a)
FULCRUM_OS=UNK
FULCRUM_ETC_HOSTS=/etc/hosts

if [[ "$UNAMEA" == *"Darwin"* ]]; then
  FULCRUM_OS=MAC
elif [[ "$UNAMEA" == *"MINGW64"* ]]; then
  FULCRUM_OS=WIN
  FULCRUM_ETC_HOSTS=/c/windows/system32/drivers/etc/hosts
elif [[ "$UNAMEA" == *"Linux"* ]]; then
  FULCRUM_OS=LIN
fi

FULCRUM_OS_LC=$(echo $FULCRUM_OS|tr '[:upper:]' '[:lower:]')

function dout() {
  if [ ${VERBOSE} -eq 1 ]; then
    echo "DEBUG: $1"
  fi
}

function vout() {
  echo "[hinge] $1"
}

function eout() {
  echo "******************"
  echo "[hinge] $1"
  echo "******************"
  exit 1
}

function now() {
  echo date +"%Y%m%d%H%M%S"
}

function dialog() {
  osascript -e 'on run args
  try
  tell app "SystemUIServer" to display dialog (item 1 of args)
  end
  activate app (path to frontmost application as text)
  end' "$1"
}

function requireSudo() {
# !!! should check OS

  # see if sudo is needed
  if which sudo && ! $(sudo -n cat /dev/null > /dev/null 2>&1); then
    # get sudo first so the focus for the password is kept in the term, instead of Docker.app
    vout "You will need to provide your user password."
    sudo cat /dev/null
  fi
}

# make a new varnish/secret
function varnishSecret() {
  if [ ! -e $FULCRUM_DIRNAME/etc/varnish/secret ]; then
    # file should have a newline
    FULCRUM_VARN_SECRET=$(rndStr 32)
    echo "$FULCRUM_VARN_SECRET" > $FULCRUM_DIRNAME/etc/varnish/secret
  else
    # variable should not have a newline
    FULCRUM_VARN_SECRET=$(cat $FULCRUM_DIRNAME/etc/varnish/secret|tr -d '\n')
  fi

  echo -n "$FULCRUM_VARN_SECRET"
}

function waitForDocker() {
  (>&2 echo -n "Waiting until Docker is running.")

  while ! $(docker run --rm hello-world > /dev/null 2>&1); do
    (>&2 echo -n ".")
    sleep 0.25
  done

  (>&2 echo -e "\n")
}

function rndStr() {
  waitForDocker
  docker run --rm fulcrum/util //fulcrum/bin/rndstr $1
}

function sendalert() {
  if [ ${QUIET} -eq 0 ]; then
    echo "$1"
  fi
}

function etcHosts() {
  ETC_HOSTS_IP=$1
  ETC_HOSTS_HOST=$2

  if ! $(egrep "^$ETC_HOSTS_IP\s+$ETC_HOSTS_HOST" $FULCRUM_ETC_HOSTS > /dev/null 2>&1); then
    vout "Adding $ETC_HOSTS_IP $ETC_HOSTS_HOST to $FULCRUM_ETC_HOSTS"

    if [[ "$FULCRUM_OS" == "WIN" ]]; then
      $FULCRUM_BINDIR/win/elevate_x64 $FULCRUM_BINDIR/win/addHost $ETC_HOSTS_HOST
    else
      echo -e "\n$ETC_HOSTS_IP $ETC_HOSTS_HOST\n" | sudo tee -a /etc/hosts
    fi
  else
    vout "Already exists in $FULCRUM_ETC_HOSTS: $ETC_HOSTS_IP $ETC_HOSTS_HOST"
  fi
}

function nginxConfAll() {
  CONFDIR=$FULCRUM_DIRNAME/etc/fulcrum/conf/

  vout "searching for config files at $CONFDIR"

  count=`ls -1 $CONFDIR/*.json 2>/dev/null | wc -l`
  if [ $count == 0 ]; then
    eout "no config files found at $CONFDIR/*.json"
  fi

  # get all the aliases if there are any
  ALIASES='{}'
  if [ -e $CONFDIR/aliases.json ]; then
    vout "$CONFDIR/aliases.json file found, loading"
    ALIASES=$(cat $CONFDIR/aliases.json)
  else
    vout "no $CONFDIR/aliases.json file found, skipping alias loading"
  fi

  # combine all sites seperated by a comma into a single var
  SITES=$(
    for f in $CONFDIR/*.json;do
      if [[ "$f" != "$CONFDIR/aliases.json" ]]; then
        cat $f;echo ",";
      fi
    done
  )

  # combine aliases and sites, remove last comma & enclose in brackets for sites
  CONF="{\"aliases\":$ALIASES,\"sites\":[${SITES%?}]}"

  # overwrite fulcrum_config.conf, keep the double slashes for windows support
  vout "writing final nginx config to $FULCRUM_DIRNAME/etc/nginx/fulcrum/fulcrum_config.conf"
  echo "$CONF" > /tmp/nodecrap
  echo "$CONF"|(docker run --rm -i fulcrum/util node //fulcrum/node/fulcrumConfs.js)>$FULCRUM_DIRNAME/etc/nginx/fulcrum/fulcrum_config.conf

  vout "send nginx container the reload signal"
  docker exec nginx kill -HUP 1
}
