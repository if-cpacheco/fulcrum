source ${FULCRUM_BINDIR}/lib/general

function restoreDatabaseBackup() {
  DO_RESTORE=true
  DB_COUNT=$(docker exec mariadb mysql -s -e "SHOW DATABASES LIKE '$FULCRUM_DBNAME';"|wc -l)

  if [ "$DB_COUNT" -gt 0 ]; then
    read -e -p "Drop existing database and restore from fresh backup? (y/n) " DROPDB

    if [ "$DROPDB" == "y" ]; then
      vout "Dropping $FULCRUM_DBNAME"
      docker exec mariadb mysql -e "DROP DATABASE $FULCRUM_DBNAME;"
    else
      vout "Skipping DB replacement."
      DO_RESTORE=false
    fi
  fi

  vout "Creating $FULCRUM_DBNAME"
  docker exec mariadb mysql -e "CREATE DATABASE IF NOT EXISTS $FULCRUM_DBNAME;"

  if [ $DO_RESTORE == true ]; then
    if [[ "$FULCRUM_DBGZ" == "s3://"* ]]; then
      if ! which aws; then
        eout "Cannot find AWS on your path!"
      fi

      vout "Downloading $FULCRUM_DBGZ"
      aws $FULCRUM_AWSPROFILE s3 cp $FULCRUM_DBGZ $FULCRUM_DBBAK
      FULCRUM_DBGZ=$FULCRUM_DBBAK
    fi

    vout "Copying $FULCRUM_DBGZ to mariadb:/tmp/tmp.sql.gz"
    docker cp $FULCRUM_DBGZ mariadb:/tmp/tmp.sql.gz

    vout "Restoring $FULCRUM_DBGZ to $FULCRUM_DBNAME"
    docker exec mariadb sh -c "gunzip -c /tmp/tmp.sql.gz | mysql $FULCRUM_DBNAME ; exit"
  fi
}

function cloneCodebase() {
  # get the repo
  if [ -d $FULCRUM_REPODIR ]; then
    vout "You appear to already have the repo, skipping git clone."
    if [ -e $FULCRUM_REPODIR/.git ]; then
      read -e -p "Do you want to update to the latest git commit? (y/n) " GITPULL

      if [ "$GITPULL" == "y" ]; then
        chmod u+w $FULCRUM_DOCROOT/sites/default
        cd $FULCRUM_REPODIR
        git pull
        chmod u-w $FULCRUM_DOCROOT/sites/default
      fi
    fi
  else
    # if the top level is not the docroot, then we want to do a sparse checkout
    if [ "$FULCRUM_DOCROOT" != "$FULCRUM_REPODIR" ]; then
      vout "Sparse checkout of $FULCRUM_REPO$FULCRUM_WRD to $FULCRUM_REPODIR"

      mkdir $FULCRUM_REPODIR

      cd $FULCRUM_REPODIR

      git init
      git remote add -f origin $FULCRUM_REPO
      git config core.sparseCheckout true

      echo "$FULCRUM_WRD" >> .git/info/sparse-checkout

      git pull origin master
    else
      vout "Cloning repo $FULCRUM_REPO to $FULCRUM_REPODIR"
      git clone $FULCRUM_REPO $FULCRUM_REPODIR
    fi

    if [ "$CLONING_SITE" = true ]; then
      vout "Removing original $FULCRUM_REPO .git directory from $FULCRUM_REPODIR"
      rm -rf $FULCRUM_REPODIR/.git
    fi
  fi

  vout "Making $FULCRUM_REPODIR/sites/default/files and .htaccess if it doesn't already exist"
  chmod u+w $FULCRUM_REPODIR/sites/default
  mkdir -p $FULCRUM_REPODIR/sites/default/files
  chmod u+w $FULCRUM_REPODIR/sites/default/files

  # remove if is it already exists
  if [ -e $FULCRUM_REPODIR/sites/default/files/.htaccess ]; then
    rm -f $FULCRUM_REPODIR/sites/default/files/.htaccess
  fi

  cp $FULCRUM_DIRNAME/etc/php5/drupal_files_htaccess $FULCRUM_REPODIR/sites/default/files/.htaccess
  chmod u-w $FULCRUM_REPODIR/sites/default $FULCRUM_REPODIR/sites/default/files/.htaccess

  if ! $(grep /fulcrum/php/fulcrum.php $FULCRUM_DOCROOT/sites/default/settings.php > /dev/null 2>&1); then
    eout "ERROR: You have not made the $FULCRUM_DOCROOT/sites/default/settings.php file compatible with Fulcrum/drush"
  fi
}

function drupalVersion() {
  D8FILE=${FULCRUM_DOCROOT}/core/lib/Drupal.php
  D7FILE=${FULCRUM_DOCROOT}/includes/bootstrap.inc
  D_FILE=${FULCRUM_DOCROOT}/modules/system/system.module

  if   [ -e $D8FILE ]; then
    echo "Checking $D8FILE"
    DRUPAL_FULL_VERSION=$( egrep "[ ']VERSION[ ']" $D8FILE|cut -d\' -f2)
    DRUPAL_MAJOR_VERSION=$(egrep "[ ']VERSION[ ']" $D8FILE|cut -d\' -f2|cut -d. -f1)
  elif [ -e $D7FILE ]; then
    echo "Checking $D7FILE"
    DRUPAL_FULL_VERSION=$( egrep "[ ']VERSION[ ']" $D7FILE|cut -d\' -f4)
    DRUPAL_MAJOR_VERSION=$(egrep "[ ']VERSION[ ']" $D7FILE|cut -d\' -f4|cut -d. -f1)
  elif [ -e $D_FILE ]; then
    echo "Checking $D_FILE"
    DRUPAL_FULL_VERSION=$( egrep "[ ']VERSION[ ']" $D_FILE|cut -d\' -f4)
    DRUPAL_MAJOR_VERSION=$(egrep "[ ']VERSION[ ']" $D_FILE|cut -d\' -f4|cut -d. -f1)
  else
    eout "Could not find files to determine Drupal version under $FULCRUM_DOCROOT"
  fi
  
  if [[ "$DRUPAL_MAJOR_VERSION" != "7" && "$DRUPAL_MAJOR_VERSION" != "8" ]]; then
      eout "Not compatible with Drupal version '$DRUPAL_MAJOR_VERSION' in $FULCRUM_DOCROOT!"
  fi

  vout "DRUPAL_MAJOR_VERSION: $DRUPAL_MAJOR_VERSION"
}

function nginxConf() {
  FUCRUM_CNF_TPL=json.tpl

  vout "Making $FULCRUM_DIRNAME/etc/fulcrum/conf/$FULCRUM_SITE.json"
  FULCRUM_COOKIE=.$(echo $FULCRUM_SITE|sed 's;^www\.;;g')
  FULCRUM_VARS=$(cat <<SETVAR
  -eFULCRUM_DBPASS=$FULCRUM_DBPASS
  -eFULCRUM_DBNAME=$FULCRUM_DBNAME
  -eFULCRUM_ENVIRONMENT=dev
  -eFULCRUM_DBUSER=$FULCRUM_DBUSER
  -eFULCRUM_WEBROOT=$FULCRUM_SITE$FULCRUM_WRD
  -eFULCRUM_COOKIE=$FULCRUM_COOKIE
SETVAR
)

  if [[ "$DRUPAL_MAJOR_VERSION" = "7" ]]; then
    REDIS=""
    VARNISH=""

    if [ -d $FULCRUM_DOCROOT/sites/all/modules/contrib/redis ]; then
      REDIS="-redis"
    fi

    if [ -d $FULCRUM_DOCROOT/sites/all/modules/contrib/varnish ]; then
      VARNISH="-varnish"
      FULCRUM_VARS="$FULCRUM_VARS -eFULCRUM_VARN_SECRET=$FULCRUM_VARN_SECRET "
    fi

    FUCRUM_CNF_TPL=json${REDIS}${VARNISH}.tpl
  else
    FUCRUM_CNF_TPL=json8.tpl
    FULCRUM_SALT=$(rndStr 74)
    FULCRUM_VARS="$FULCRUM_VARS -eFULCRUM_SALT=$FULCRUM_SALT -eFULCRUM_D8CONFIG=../config/sync "
  fi

  DOCKER_CMD="docker run --rm -i $FULCRUM_VARS fulcrum/util //usr/bin/envsubst"

  cat $FULCRUM_DIRNAME/etc/fulcrum/conf/$FUCRUM_CNF_TPL|($DOCKER_CMD)>$FULCRUM_DIRNAME/etc/fulcrum/conf/$FULCRUM_SITE.json

  # combine all confs seperated by a comma into a single var
  CONFS=$(for f in $FULCRUM_DIRNAME/etc/fulcrum/conf/*.json;do cat $f;echo ",";done)

  # remove last comma and enclose in brackets
  CONFS="[${CONFS%?}]"

  # overwrite fulcrum_config.conf
  echo "$CONFS"|(docker run --rm -i fulcrum/util node //fulcrum/node/fulcrumConfs.js)>$FULCRUM_DIRNAME/etc/nginx/fulcrum/fulcrum_config.conf

  docker exec nginx kill -HUP 1
}

function fulcrumDBUser() {
  SQL="GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON $FULCRUM_DBNAME.* TO '$FULCRUM_DBUSER'@'172.16.0.0/255.240.0.0' IDENTIFIED BY '$FULCRUM_DBPASS'; FLUSH PRIVILEGES"
  # ensure fulcrum user is in mysql
  vout "Ensuring fulcrum user exists in mysql: $SQL"
  docker exec mariadb mysql -e "$SQL"
}

function drushSysVars() {
  copyConf

  cd $FULCRUM_REPODIR

  # set public directory
  vout "Running drush to set public directory"
  if [[ "$DRUPAL_MAJOR_VERSION" = "7" ]]; then
    drushCmd vset file_public_path sites/default/files
  else
    # drushCmd config-set system.file path.public sites/default/files
    echo
  fi

  # set temporary directory
  vout "Running drush to set temporary"
  if [[ "$DRUPAL_MAJOR_VERSION" = "7" ]]; then
    drushCmd vset file_temporary_path /tmp
  else
    # drushCmd config-set system.file path.temporary /tmp
    echo
  fi

  # set private directory
  # vout "running drush to set public directory"
  # if [[ "$DRUPAL_MAJOR_VERSION" = "7" ]]; then
  #   drushCmd vset file_private_path /private
  # else
  #   drushCmd config-set system.file path.private /private
  # fi

  # vout "Running drush to run update.php"
  # drushCmd updb

  # clear all caches
  vout "Running drush to clear caches"
  if [[ "$DRUPAL_MAJOR_VERSION" = "7" ]]; then
    drushCmd cc all
  else
    drushCmd cr
  fi
}

function drushUserLogin() {
  vout "Running drush to get UID 1 login"
  drushCmd uli --uri=http://$FULCRUM_SITE

  vout "$FULCRUM_SITE login: git web--browse \"$DRUSHCMDRESULT\""
  git web--browse "$DRUSHCMDRESULT"
}

function setupEnv() {
  CLONING_SITE=false

  if [[ "$1" = "--clone" ]]; then
    CLONING_SITE=true
    FULCRUM_SITE=$2
    FULCRUM_DBGZ=$3
    FULCRUM_DBNAME=$4
    FULCRUM_REPO=$5
    FULCRUM_WRD=$6
    FULCRUM_AWSPROFILE=$7
  else
    FULCRUM_SITE=$1
    FULCRUM_DBGZ=$2
    FULCRUM_DBNAME=$3
    FULCRUM_REPO=$4
    FULCRUM_WRD=$5
    FULCRUM_AWSPROFILE=$6
  fi

  if [ ! -z $FULCRUM_AWSPROFILE ]; then
      FULCRUM_AWSPROFILE="--profile $FULCRUM_AWSPROFILE"
  fi

  if [ -z $FULCRUM_SITE ]; then
      eout "Error, FULCRUM_SITE not provided!"
  fi

  if [ -z $FULCRUM_DBGZ ]; then
      eout "Error, FULCRUM_DBGZ not provided!"
  fi

  if [ -z $FULCRUM_DBNAME ]; then
      eout "Error, FULCRUM_DBNAME not provided!"
  fi

  if [ -z $FULCRUM_REPO ]; then
      eout "Error, FULCRUM_REPO not provided!"
  fi

  FULCRUM_DBBAK=$FULCRUM_DIRNAME/var/fulcrum/bak/$FULCRUM_SITE.sql.gz
  FULCRUM_CONF=$FULCRUM_DIRNAME/etc/fulcrum/conf/$FULCRUM_SITE.json
  FULCRUM_REPODIR=$FULCRUM_DIRNAME/sites/$FULCRUM_SITE
  FULCRUM_DOCROOT=$FULCRUM_REPODIR
  FULCRUM_DBUSER=fulcrum_$FULCRUM_DBNAME
  FULCRUM_DBPASS=$(rndStr 32)

  if [[ -z $FULCRUM_WRD || $FULCRUM_WRD == "" || $FULCRUM_WRD == "/" ]]; then
    if [ -d $FULCRUM_DOCROOT/docroot ]; then
      FULCRUM_WRD=/docroot
    else
      FULCRUM_WRD=""
    fi
  elif [[ ! "$FULCRUM_WRD" == "/"* ]]; then
    FULCRUM_WRD="/$FULCRUM_WRD"
  fi

  FULCRUM_DOCROOT=$FULCRUM_REPODIR$FULCRUM_WRD

  if [ -e $FULCRUM_DIRNAME/etc/varnish/secret ]; then
    FULCRUM_VARN_SECRET=$(cat $FULCRUM_DIRNAME/etc/varnish/secret)
  else
    echo -n "$FULCRUM_VARN_SECRET" > $FULCRUM_DIRNAME/etc/varnish/secret
  fi

  vout "FULCRUM_BINDIR:      $FULCRUM_BINDIR"
  vout "FULCRUM_DIRNAME:     $FULCRUM_DIRNAME"
  vout "FULCRUM_SITE:        $FULCRUM_SITE"
  vout "FULCRUM_CONF:        $FULCRUM_CONF"
  vout "FULCRUM_REPO:        $FULCRUM_REPO"
  vout "FULCRUM_REPODIR:     $FULCRUM_REPODIR"
  vout "FULCRUM_WRD:         $FULCRUM_WRD"
  vout "FULCRUM_DOCROOT:     $FULCRUM_DOCROOT"
  vout "FULCRUM_DBBAK:       $FULCRUM_DBBAK"
  vout "FULCRUM_DBGZ:        $FULCRUM_DBGZ"
  vout "FULCRUM_DBUSER:      $FULCRUM_DBUSER"
  vout "FULCRUM_DBNAME:      $FULCRUM_DBNAME"
  vout "FULCRUM_DBPASS:      $FULCRUM_DBPASS"
  vout "FULCRUM_AWSPROFILE:  $FULCRUM_AWSPROFILE"
  vout "FULCRUM_VARN_SECRET: $FULCRUM_VARN_SECRET"
}

function copyConf() {
  vout "docker cp $FULCRUM_CONF drush:/config.json"
  docker cp $FULCRUM_CONF drush:/config.json  
}

function drushCmd() {
  DRUSHCMD="cd /var/www/html/$FULCRUM_SITE$FULCRUM_WRD && /usr/local/bin/drush $@ && exit"
  vout "$DRUSHCMD"
  # echo "cd /var/www/html/$FULCRUM_SITE$FULCRUM_WRD && /usr/local/bin/drush $@" | docker exec -i drush //bin/sh
  DRUSHCMDRESULT=$(docker exec -i drush //bin/sh -c "$DRUSHCMD")
}