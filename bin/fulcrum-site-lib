source ${SDIR}/fulcrum-lib

restoreDatabaseBackup() {
  DO_RESTORE=true
  DB_COUNT=$(echo "SHOW DATABASES LIKE '$FULCRUM_DBNAME'"|docker exec -i mariadb mysql -s|wc -l)

  if [ "$DB_COUNT" -gt 0 ]; then
    read -e -p "Drop existing database and restore from fresh backup? (y/n) " DROPDB

    if [ "$DROPDB" == "y" ]; then
      vout "DROPPING $FULCRUM_DBNAME"
      echo "DROP DATABASE $FULCRUM_DBNAME;"|docker exec -i mariadb mysql
    else
      vout "Skipping DB replacement."
      DO_RESTORE=false
    fi
  fi

  echo "CREATE DATABASE IF NOT EXISTS $FULCRUM_DBNAME"|docker exec -i mariadb mysql

  if [ $DO_RESTORE == true ]; then
    if [[ "$FULCRUM_DBGZ" == "s3://"* ]]; then
      if ! which aws; then
        eout "Cannot find AWS on your path!"
      fi

      aws $FULCRUM_AWSPROFILE s3 cp $FULCRUM_DBGZ $FULCRUM_DBBAK
      FULCRUM_DBGZ=$FULCRUM_DBBAK
    fi

    vout "Restoring $FULCRUM_DBNAME from $FULCRUM_DBGZ"
    # gzcat "$FULCRUM_DBGZ" | docker exec -i mariadb mysql $FULCRUM_DBNAME
    gunzip -c "$FULCRUM_DBGZ" | docker exec -i mariadb mysql $FULCRUM_DBNAME
  fi
}

cloneCodebase() {
  # get the repo
  if [ -d ~/repos/$FULCRUM_SITE ]; then
    vout "You appear to already have the repo, skipping git clone."
    if [ -e ~/repos/$FULCRUM_SITE/.git ]; then
      read -e -p "Do you want to update to the latest git commit? (y/n) " GITPULL

      if [ "$GITPULL" == "y" ]; then
        chmod u+w $FULCRUM_DOCROOT/sites/default
        cd ~/repos/$FULCRUM_SITE
        git pull
        chmod u-w $FULCRUM_DOCROOT/sites/default
      fi
    fi
  else
    vout "Cloning repo $FULCRUM_REPO to ~/repos/$FULCRUM_SITE"
    git clone $FULCRUM_REPO ~/repos/$FULCRUM_SITE

    if [ "$CLONING_SITE" = true ]; then
      vout "Removing original $FULCRUM_REPO .git directory from ~/repos/$FULCRUM_SITE"
      rm -rf ~/repos/$FULCRUM_SITE/.git
    fi
  fi

  if ! grep /fulcrum/php/fulcrum.php $FULCRUM_DOCROOT/sites/default/settings.php; then
    eout "ERROR: You have not made the $FULCRUM_DOCROOT/sites/default/settings.php file compatible with Fulcrum/drush"
  fi
}

drupalVersion() {
  D8FILE=${FULCRUM_DOCROOT}/core/lib/Drupal.php
  D7FILE=${FULCRUM_DOCROOT}/includes/bootstrap.inc
  D_FILE=${FULCRUM_DOCROOT}/modules/system/system.module

  if   [ -e $D8FILE ]; then
    echo "Checking $D8FILE"
    DRUPAL_FULL_VERSION=$( egrep "[ ']VERSION[ ']" $D8FILE|cut -d\' -f2)
    DRUPAL_MAJOR_VERSION=$(egrep "[ ']VERSION[ ']" $D8FILE|cut -d\' -f2|cut -d. -f1)
  elif [ -e $D7FILE ]; then
    echo "Checking $D7FILE"
    DRUPAL_FULL_VERSION=$( egrep "[ ']VERSION[ ']" $D7FILE|cut -d\' -f4)
    DRUPAL_MAJOR_VERSION=$(egrep "[ ']VERSION[ ']" $D7FILE|cut -d\' -f4|cut -d. -f1)
  elif [ -e $D_FILE ]; then
    echo "Checking $D_FILE"
    DRUPAL_FULL_VERSION=$( egrep "[ ']VERSION[ ']" $D_FILE|cut -d\' -f4)
    DRUPAL_MAJOR_VERSION=$(egrep "[ ']VERSION[ ']" $D_FILE|cut -d\' -f4|cut -d. -f1)
  else
    eout "Could not find files to determine Drupal version under $FULCRUM_DOCROOT"
  fi
  
  if [[ "$DRUPAL_MAJOR_VERSION" != "7" && "$DRUPAL_MAJOR_VERSION" != "8" ]]; then
      eout "Not compatible with Drupal version '$DRUPAL_MAJOR_VERSION' in $FULCRUM_DOCROOT!"
  fi

  echo "DRUPAL_MAJOR_VERSION: $DRUPAL_MAJOR_VERSION"
}

prepFileSystem() {
  # remove webroot link if it exists
  if [ -L $FULCRUM_DIRNAME/webroots/$FULCRUM_SITE ]; then
    vout "Removing previous symlink $FULCRUM_DIRNAME/webroots/$FULCRUM_SITE"
    rm -f $FULCRUM_DIRNAME/webroots/$FULCRUM_SITE
  fi

  vout "Symlinking ../../repos/$FULCRUM_SITE$FULCRUM_WRD -> $FULCRUM_DOCROOT"
  ln -s $FULCRUM_DOCROOT_REL $FULCRUM_DIRNAME/webroots/$FULCRUM_SITE

  # make local files dir
  if [ ! -d $FULCRUM_DIRNAME/files/$FULCRUM_SITE ]; then
    vout "Making file directory $FULCRUM_DIRNAME/files/$FULCRUM_SITE and symlink from /repos/$FULCRUM_SITE/sites/default/files"
    mkdir -p $FULCRUM_DIRNAME/files/$FULCRUM_SITE
    chmod -R 777 $FULCRUM_DIRNAME/files/$FULCRUM_SITE # don't like that this is 777, but you have trouble with uploads otherwise
  fi

  vout "Removing previous symlink if it existed $FULCRUM_DOCROOT/sites/default/files"
  chmod u+w $FULCRUM_DOCROOT/sites/default
  rm -f $FULCRUM_DOCROOT/sites/default/files

  # link to the files
  vout "Symlinking ~/repos/$FULCRUM_SITE/sites/default/files -> /drupal_files/$FULCRUM_SITE"
  ln -s /drupal_files/$FULCRUM_SITE $FULCRUM_DOCROOT/sites/default/files

  chmod u-w $FULCRUM_DOCROOT/sites/default

  if ! grep "127.0.0.1 $FULCRUM_SITE" /etc/hosts; then
    vout "Adding 127.0.0.1 $FULCRUM_SITE to /etc/hosts"
    echo -e "\n127.0.0.1 $FULCRUM_SITE\n" | sudo tee -a /etc/hosts
  fi
}

nginxConf() {
  FUCRUM_CNF_TPL=json.tpl

  echo "Making $FULCRUM_DIRNAME/conf/tmp.vars to hand off to docker util"
  echo "export FULCRUM_DBPASS=$FULCRUM_DBPASS"                          >  $FULCRUM_DIRNAME/conf/tmp.vars
  echo "export FULCRUM_DBNAME=$FULCRUM_DBNAME"                          >> $FULCRUM_DIRNAME/conf/tmp.vars
  echo "export FULCRUM_ENVIRONMENT=dev"                                 >> $FULCRUM_DIRNAME/conf/tmp.vars
  echo "export FULCRUM_DBUSER=$FULCRUM_DBUSER"                          >> $FULCRUM_DIRNAME/conf/tmp.vars
  echo "export FULCRUM_WEBROOT=$FULCRUM_SITE"                           >> $FULCRUM_DIRNAME/conf/tmp.vars
  echo "export FULCRUM_COOKIE=.$(echo $FULCRUM_SITE|sed 's;^www\.;;g')" >> $FULCRUM_DIRNAME/conf/tmp.vars

  if [[ "$DRUPAL_MAJOR_VERSION" = "7" ]]; then
    REDIS=""
    VARNISH=""

    if [ -d $FULCRUM_DOCROOT/sites/all/modules/contrib/redis ]; then
      REDIS="-redis"
    fi

    if [ -d $FULCRUM_DOCROOT/sites/all/modules/contrib/varnish ]; then
      VARNISH="-varnish"
    fi

    FUCRUM_CNF_TPL=json${REDIS}${VARNISH}.tpl
  else
    echo "export FULCRUM_SALT=$(rndStr 74)"       >> $FULCRUM_DIRNAME/conf/tmp.vars
    echo "export FULCRUM_D8CONFIG=../config/sync" >> $FULCRUM_DIRNAME/conf/tmp.vars

    FUCRUM_CNF_TPL=json8.tpl
  fi

  echo "Writing $FULCRUM_DIRNAME/conf/$FULCRUM_SITE.json"
  ### for this to work, we need all the variables in json.tpl
  docker run --rm \
    --volume $FULCRUM_DIRNAME/conf:/fulcrum/conf \
    --volume $FULCRUM_DIRNAME/etc/nginx/fulcrum:/fulcrum/etc/nginx/fulcrum \
    fulcrum/util //fulcrum/bin/nginxConfig $FUCRUM_CNF_TPL $FULCRUM_SITE

  docker exec nginx kill -HUP 1

  rm $FULCRUM_DIRNAME/conf/tmp.vars
}

fulcrumDBUser() {
  # ensure fulcrum user is in mysql
  vout "Ensuring fulcrum user exists in mysql"

  echo "GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON $FULCRUM_DBNAME.* TO '$FULCRUM_DBUSER'@'172.17.%' IDENTIFIED BY '$FULCRUM_DBPASS'; FLUSH PRIVILEGES"|docker exec -i mariadb mysql
}

drushSysVars() {
  copyConf

  cd ~/repos/$FULCRUM_SITE

  # set public directory
  vout "Running drush to set public directory"
  if [[ "$DRUPAL_MAJOR_VERSION" = "7" ]]; then
    drushCmd vset file_public_path sites/default/files
  else
    # drushCmd config-set system.file path.public sites/default/files
    echo
  fi

  # set temporary directory
  vout "Running drush to set temporary"
  if [[ "$DRUPAL_MAJOR_VERSION" = "7" ]]; then
    drushCmd vset file_temporary_path /tmp
  else
    # drushCmd config-set system.file path.temporary /tmp
    echo
  fi

  # set private directory
  # vout "running drush to set public directory"
  # if [[ "$DRUPAL_MAJOR_VERSION" = "7" ]]; then
  #   drushCmd vset file_private_path /private
  # else
  #   drushCmd config-set system.file path.private /private
  # fi

  vout "Running drush to run update.php"
  drushCmd updb

  # clear all caches
  vout "Running drush to clear caches"
  if [[ "$DRUPAL_MAJOR_VERSION" = "7" ]]; then
    drushCmd cc all
  else
    drushCmd cr
  fi
}

drushUserLogin() {
  vout "Running drush to get UID 1 login"
  drushCmd uli
}

setupEnv() {
  CLONING_SITE=false

  FULCRUM_DIRNAME=$(dirname $SDIR)
  vout "FULCRUM_DIRNAME: $FULCRUM_DIRNAME"

  if [[ "$1" = "--clone" ]]; then
    CLONING_SITE=true
    FULCRUL_ORIG_SITE=$2

    FULCRUM_SITE=$3
    FULCRUM_DBGZ=$4
    FULCRUM_DBNAME=$5
    FULCRUM_REPO=$6
    FULCRUM_WRD=$7
    FULCRUM_AWSPROFILE=$8
  else
    FULCRUL_ORIG_SITE=$1

    FULCRUM_SITE=$1
    FULCRUM_DBGZ=$2
    FULCRUM_DBNAME=$3
    FULCRUM_REPO=$4
    FULCRUM_WRD=$5
    FULCRUM_AWSPROFILE=$6
  fi

  if [ ! -z $FULCRUM_AWSPROFILE ];
  then
      FULCRUM_AWSPROFILE="--profile $FULCRUM_AWSPROFILE"
  fi

  if [ -z $FULCRUM_SITE ]; then
      eout "Error, FULCRUM_SITE not provided!"
  else
      vout "FULCRUM_SITE: $FULCRUM_SITE"
  fi

  if [ -z $FULCRUM_DBGZ ]; then
      eout "Error, FULCRUM_DBGZ not provided!"
  else
      vout "FULCRUM_DBGZ: $FULCRUM_DBGZ"
  fi

  if [ -z $FULCRUM_DBNAME ]; then
      eout "Error, FULCRUM_DBNAME not provided!"
  else
      vout "FULCRUM_DBNAME: $FULCRUM_DBNAME"
  fi

  if [ -z $FULCRUM_REPO ]; then
      eout "Error, FULCRUM_REPO not provided!"
  else
      vout "FULCRUM_REPO: $FULCRUM_REPO"
  fi

  if [[ -z $FULCRUM_WRD || ! "$FULCRUM_WRD" == "/"* ]]; then
      FULCRUM_WRD="/$FULCRUM_WRD"
  fi
  vout "FULCRUM_WRD: $FULCRUM_WRD"

  FULCRUM_DBBAK=$FULCRUM_DIRNAME/bak/$FULCRUM_SITE.sql.gz
  FULCRUM_CONF=$FULCRUM_DIRNAME/conf/$FULCRUM_SITE.json
  FULCRUM_DOCROOT=$HOME/repos/$FULCRUM_SITE$FULCRUM_WRD
  FULCRUM_DOCROOT_REL=../../repos/$FULCRUM_SITE$FULCRUM_WRD
  FULCRUM_DBUSER=fulcrum_$FULCRUM_DBNAME

  # generate a random password
  FULCRUM_DBPASS=$(rndStr 32)
  vout "FULCRUM_DBPASS: $FULCRUM_DBPASS"

  # see if we need to add the docroot
  if [ -d $FULCRUM_DOCROOT/docroot ]; then
    FULCRUM_DOCROOT=$FULCRUM_DOCROOT/docroot
    FULCRUM_DOCROOT_REL=$FULCRUM_DOCROOT_REL/docroot
  fi

  if [ -e $FULCRUM_DIRNAME/etc/varnish/secret ]; then
    FULCRUM_VARN_SECRET=$(cat $FULCRUM_DIRNAME/etc/varnish/secret)
  else
    echo -n "$FULCRUM_VARN_SECRET" > $FULCRUM_DIRNAME/etc/varnish/secret
  fi

  vout "FULCRUM_VARN_SECRET: $FULCRUM_VARN_SECRET"
}

copyConf() {
  echo "docker cp $FULCRUM_CONF drush:/config.json"
  docker cp $FULCRUM_CONF drush:/config.json  
}

drushCmd() {
  echo "docker exec -i drush /usr/local/bin/drush --uri=http://$FULCRUM_SITE --root=/var/repos/$FULCRUM_SITE$FULCRUM_WRD $@"
  docker exec -i drush /usr/local/bin/drush --uri=http://$FULCRUM_SITE --root=/var/repos/$FULCRUM_SITE$FULCRUM_WRD $@
}