source ${FULCRUM_BINDIR}/general-lib

function usage() {
  echo "Example Usage: "
  echo " -h  Help"
  echo " -n  No docker pull (default)"
  echo " -p  Do docker pull (update your images)"
  echo " -q  quiet"
  echo " -v  verbose (debug"
  echo ""
  echo "up    - restart all containers, also use to start them [restart] [start]"
  echo "dps   - show containers (running or stopped) [ps]"
  echo "haproxyrestart - restart haproxy, for when modifying the config [haproxy] [haproxy-restart]"
  echo ""
  echo "dbash - step inside a running container [bash] [sh]"
  echo "dlogs - show logs being put out from containers, ctrl+C to stop following [dlog]"
  echo ""
  echo "This requires docker for mac, please get the stable version from https://docs.docker.com/docker-for-mac/"
  exit 0
}

# show container status
function dps() {
  docker-compose --file "${DCFILE}" ps
  exit 0
}

# show container logs
function dlogs() {
  sendalert "We are following the logs of the containers, Ctrl+C to stop"
  docker-compose --file "${DCFILE}" logs -f
  exit 0
}

# start/restart all our containers
function drestart() {
  # ensure that whitelist.vcl gets made else varnish dies on boot
  bash $FULCRUM_BINDIR/varnish-whitelist

  # run d4m-nfs in order to allow using NFS volume mounts
  if [[ "$FULCRUM_OS" == "MAC" ]]; then
    ~/repos/d4m-nfs/d4m-nfs.sh
  fi

  # this trick helps kill everything in the event compose file changes and it doesn't really stop everything
  RUNNING_CONTAINERS=$(docker ps -q | wc -l)
  if [ $RUNNING_CONTAINERS -gt 0 ]; then
    sendalert "stopping any running containers"
    docker stop $(docker ps -q) 1>/dev/null
  fi

  STOPPED_CONTAINERS=$(docker ps -a -q | wc -l)
  if [ $STOPPED_CONTAINERS -gt 0 ]; then
    sendalert "killing any stopped containers"
    docker rm -f $(docker ps -a -q) 1>/dev/null
  fi


  if [ $DOPULL -eq 1 ]; then
    vout "doing docker pull"
    sendalert "doing docker pull, if you get an error about \"TLS handshake timeout\", then re-run this same command again"
    docker-compose --file "${DCFILE}" pull
  else
    vout "skipping docker pull"
    sendalert "skipping docker image pull, add -p flag if you wish to pull next time"
  fi

  vout "starting containers"
  sendalert "Starting containers"
  if [ $QUIET -eq 1 ]; then
    vout "quiet docker-compose up"
    docker-compose --file "${DCFILE}" up -d 1>/dev/null 2>/dev/null
  else
    vout "verbose docker-compose up"
    docker-compose --file "${DCFILE}" up -d
  fi
}

# step into docker container
function dbash() {
  FULCRUM_OS_INT_PREFIX=""
  if [[ "$FULCRUM_OS" == "WIN" ]]; then
    FULCRUM_OS_INT_PREFIX="winpty "
  fi

  DOCKER_IMAGES=$(docker ps --format '{{.Names}}' | sort | awk '{ print FNR " " $0 }')
  echo "$DOCKER_IMAGES"
  read -p "Please enter container number to enter: " MYNUMBER
  ENTER_IMAGE=$(echo "$DOCKER_IMAGES" | awk -v MYNUMBER=${MYNUMBER} '$1 == MYNUMBER { print $2 }')

  echo "${ENTER_IMAGE}"
  # https://github.com/docker/docker/issues/9299
  $FULCRUM_OS_INT_PREFIX docker exec -it ${ENTER_IMAGE} sh -c "export TERM=xterm; exec sh"
}

function haproxyrestart() {
  # ensure we have no syntax errors
  docker exec haproxy /usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -c 1>/dev/null 2>/dev/null
  if [ $? -gt 0 ]; then
    eout "FATAL: syntax error in haproxy config it seems, quitting without restart"
  fi

  docker kill -s HUP haproxy
  sendalert "haproxy has been reloaded"
}
